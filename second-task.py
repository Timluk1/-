'''Файл second-task.txt.txt содержит последовательность целых, неотрицательных чисел, каждое из которых не превышает 10^5.
Необходимо определить количество троек чисел, которые могут являться непрерывной подполседовательностью чисел Фибоначи.
Числа Фибоначи начинаются с 0 и 1 каждое последующее равно сумме двух предыдущих 0, 1, 1, 2, 3, 5, 8, 13 и тд. (0, 1, 1),
(5, 8, 13) и тд. являются непрерывной подпоследовательностью. В ответе укажите количсество чисел и максимальную сумму таких троек.
Под тройкой подразумевается три подряд идущих числа.
'''


# 1) получим последовательность Фибоначи, чтобы каждый ее член не превышал 10 ** 4
fib_ls = [0, 1]
el = fib_ls[-2] + fib_ls[-1]
while el <= 10 ** 5:
    fib_ls.append(el)
    el = fib_ls[-2] + fib_ls[-1]


# 2) функция для проверки того, что три числа являются подпоследовательностью чисел Фибоначи
def fib(a1, b1, c1, fib_ls):
    for a2, b2, c2 in zip(fib_ls, fib_ls[1:], fib_ls[2:]):
        if a1 == a2 and b1 == b2 and c1 == c2: return True
    return False


# 3) работа с файлом
ls = [int(i) for i in open("files/second-task.txt")]
ans_ls = []
for a, b, c in zip(ls, ls[1:], ls[2:]):
    if fib(a, b, c, fib_ls):
        ans_ls.append(a + b + c)
print(len(ans_ls), max(ans_ls))